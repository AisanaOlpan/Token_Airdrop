import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { CONTRACT_ADDRESS, abi } from "../../constants/index";
import Input from "../../components/Inputs/Input";
import Web3Modal from "web3modal";
import { Contract, providers, ethers } from "ethers";
import SpinnerButton from "../../components/Buttons/SpinnerButton";
import React, { useEffect, useState, useRef } from "react";
import Modal from "../../components/Modal/Modal";
const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [walletConnected, setWalletConnected] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const web3ModalRef = useRef();
  const [inputValue, setInputValue] = useState("");
  const [isModal, setModal] = React.useState(false);
  const [titleModal, settitleModal] = React.useState("");
  const handleInputChange = (e) => {
    setInputValue(e.target.value);
  };

  const getProviderOrSigner = async (needSigner = false) => {
    const provider = await web3ModalRef.current.connect();
    const web3Provider = new ethers.providers.Web3Provider(provider);

    const PRIVATE_KEY = process.env.PRIVATE_KEY;

    const wallet = new ethers.Wallet(PRIVATE_KEY, web3Provider);

    const { chainId } = await web3Provider.getNetwork();
    if (chainId !== 97) {
      window.alert("Change network");
      //TODO metmask переключился на 97
    }
    if (needSigner) {
      // const signer = web3Provider.getSigner(); //текущий кошелек юзера который вызывает
      // получаем объект signer из кошелька
      const signer2 = wallet.connect(web3Provider);
      console.log(signer2);
      return signer2;
    }
    return web3Provider;
  };

  const connectWallet = async () => {
    try {
      await getProviderOrSigner();
      setWalletConnected(true);
    } catch (error) {
      console.error(error);
    }
  };

  useEffect(() => {
    if (!walletConnected) {
      web3ModalRef.current = new Web3Modal({
        network: 97,
        providerOptions: {},
        disableInjectedProvider: false,
      });
      connectWallet();
      console.log(walletConnected);
    }
  }, [walletConnected]);

  const sendToken = async () => {
    try {
      const signer = await getProviderOrSigner(true);
      const tokenContract = new Contract(CONTRACT_ADDRESS, abi, signer);
      const transfered = await tokenContract.transfer(
        inputValue,
        ethers.utils.parseUnits("1")
      );

      const txReceipt = await transfered.wait(1);
      settitleModal(
        `1 Token successfully added! if it is not visible then import the address ${CONTRACT_ADDRESS}`
      );
      setModal(true);
    } catch (error) {
      console.error(error);
    }
  };

  const handleClick = async () => {
    setIsLoading(true);
    await sendToken();
    setIsLoading(false);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.description}>
          <Input
            label="Enter address"
            id="addrSender"
            value={inputValue}
            onChange={handleInputChange}
          />

          <SpinnerButton
            onClick={handleClick}
            loading={isLoading}
            children={walletConnected ? "Send" : "Connect wallet"}
          ></SpinnerButton>
        </div>
      </main>

      <Modal
        isVisible={isModal}
        // title={titleModal}
        content={<p>{titleModal}</p>}
        footer={<p></p>}
        onClose={() => setModal(false)}
      />
    </>
  );
}
